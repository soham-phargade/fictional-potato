Current Status:

MVP is live and working on Vercel: https://fictional-potato-zeta.vercel.app/
Users enter their own API key to use it
Basic accept/reject flow is functional

Phase 1: Make it scalable (Priority)
Problem: We're using user API keys which limits adoption. We need our own backend.
Solution - Tech Stack:

Frontend: Keep on Vercel (working great)
Backend: Vercel Serverless Functions
Database: Supabase (Postgres + built-in auth)
LLM: Switch from Claude to Groq (free tier = 14,400 requests/day, super fast)

Why this stack:

All free to start ($0/month for first 1K users)
Scales automatically
No server management
Deploy in hours, not days

Phase 2: Core features to build

User Authentication (Supabase Auth)

Sign up / Login
Each user gets personalized experience


Conversation History

Store all past prompts and chats per user
Users can review previous conversations


Recommendation Algorithm (Multi-Armed Bandit)

Track what each user accepts/rejects
Personalize future prompts based on their preferences
Implement Thompson Sampling or Epsilon-Greedy algorithm





https://medium.com/@ark.iitkgp/thompson-sampling-python-implementation-cb35a749b7aa

Initialization Step:
Assign prior probability distributions to each armâ€™s expected reward (e.g., using beta distributions).

Recurrence Step:

For each time step, repeat:

a. Sample from the posterior distributions of each arm (e.g., using beta distribution sampling after incorporating observed rewards).
b. Select the arm with the highest sample value (exploitation) and perform the corresponding action.
c. Observe the reward from the selected arm.
d. Update the posterior distribution of the selected arm using the observed reward (e.g., update the beta distribution parameters).